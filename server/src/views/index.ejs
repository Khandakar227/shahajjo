<!DOCTYPE html>
<html>

<head>
    <title>Shahajjo</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://maps.googleapis.com/maps/api/js?key=<%= mapApiKey %>"></script>
    <style>
        #map {
            height: 100%;
            width: 100%;
        }

        html,
        body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        button {
            border: 0px;
            outline: none;
            width: fit-content;
            filter: drop-shadow(0px 2px 3px #343434);
        }
        .add-btn {
            padding: 0.4rem 1.02rem;
            text-decoration: none;
            border-radius: 40px;
            background-color: #d73214;
            color: white;
            font-size: 2rem;
            position: fixed;
            bottom: 10px;
            left: calc(50% - 43px);
            right: 5px;
            display: block;
        }
    </style>
</head>

<body>
    <div id="map"></div>

    <script>
        const FLOOD_MONITOR_API_URL = '/api/v1/flood-monitor';
        const searchParams = new URLSearchParams(location.search);
        let gpsLocation = { lat: 23.8002302959404, lng: 90.40662455502002 };
        // Check if the URL has the lat and lng query parameters
        const targetCord = { lat: +searchParams.get('lat'), lng: +searchParams.get('lng') };

        // If the URL has the lat and lng query parameters, use them as the GPS location
        if (targetCord.lat && targetCord.lng) gpsLocation = targetCord;
        // Get the GPS location
        async function getLocation() {
            // Check if the browser supports geolocation
            if (!navigator.geolocation) return
            try {
                const position = await new Promise((resolve, reject) => { navigator.geolocation.getCurrentPosition(resolve, reject); });
                gpsLocation.lat = position.coords.latitude,
                    gpsLocation.lng = position.coords.longitude
                return gpsLocation;
            } catch (error) {
                console.error("Error retrieving location:", error);
            }
        }

        // Get the gps location first
        getLocation().then(() => {
            function initMap() {
                // Initialize the map
                var map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 14,
                    center: gpsLocation, // Center of the BD
                    fullscreenControl: false,
                    streetViewControl: false
                });

                // Update the center coordinates of the map
                function updateCenterCoordinates() {
                    var mapCenter = map.getCenter();
                    var lat = mapCenter.lat();
                    var lng = mapCenter.lng();
                    const distance = calculateDistance(gpsLocation.lat, gpsLocation.lng, lat, lng);
                    if (distance < 10) return;
                    gpsLocation = { lat, lng };
                    console.log(`Longitude: ${lng}, Latitude: ${lat}`);
                    getIncidents(gpsLocation);
                }

                // An array to store the markers
                let markers = [];

                // Get the incidents from the server
                function getIncidents(positon) {
                    markers.forEach(marker => marker.setMap(null));
                    fetch(FLOOD_MONITOR_API_URL)
                        .then(response => response.json())
                        .then(data => {
                            const locations = data?.incidents;
                            // Loop through the locations and add markers to the map
                            for (var i = 0; i < locations.length; i++) {
                                let offset = (Math.random() * 2 - 1) * 0.0001;
                                // Create a marker
                                var marker = new google.maps.Marker({
                                    position: { lat: locations[i].location.coordinates[1], lng: locations[i].location.coordinates[0] }, map: map,
                                });
                                markers.push(marker);
                                // Create an info window content
                                const content = `<div>
                                <h3>${locations[i]?.incidentType == 'রক্তদান' ? locations[i]?.bloodGroup : ""} ${locations[i].incidentType}</h3>
                               ${locations[i].mobileNo ? `<p style="padding-top: 1rem;">Mobile Number: <b>${locations[i].mobileNo}</b></p>` : ""}
                                ${locations[i]?.locationName ? `<p>${locations[i]?.locationName}</p>` : ""}
                                <p>${locations[i].description}</p>
                                <p style="padding-top: 1rem;text-align:end;font-size: 0.7rem;color:#939393;"> ${timeAgo(locations[i].created_at)} </p>
                                </div>`;

                                // Attach an info window to each marker
                                attachInfoWindow(marker, content);
                            }
                        })
                        .catch(error => console.error("Error fetching incidents:", error));
                }
                // Get the incidents for the first time
                getIncidents(gpsLocation);
                // Create a marker for the current location
                const _marker = new google.maps.Marker({
                    position: gpsLocation,
                    map: map,
                });
                // Update the center coordinates when the map is dragged
                map.addListener('center_changed', function () {
                    updateCenterCoordinates();
                });
            }

            // Initialize the map
            initMap();
        });


        // Attach an info window to a marker
        function attachInfoWindow(marker, message) {
            var infowindow = new google.maps.InfoWindow({
                content: message
            });

            // Show the info window when marker is clicked
            marker.addListener('click', function () {
                infowindow.open(marker.get('map'), marker);
            });
        }
    </script>
</body>

</html>